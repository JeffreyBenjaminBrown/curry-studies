* a simpler model for queries
** Querying pairs of ints
type P = (Int,Int)
PQuery =  PImg [P]  |  PHas Int
  .    |  PAnd [PQuery]  |  POr [PQuery]
  .    |  PNot PQuery  |  PVar String  |  PAnonVar Int
** Querying trees
data T = T Int [T]
TQuery: TImg T
  .  |  THasMember TQuery  |  THas TQuery  |  THasAt TQuery
  .  |  TAnd [TQuery]  |  TOr [TQuery]
  .  |  TNot TQuery  |  TVariety Variety  |  TVar String  | TAnonVar Int
** procedural exercises (maybe for Haskell)
*** queries
**** results|observations|notes
***** "not" is always a "does it belong to the collection ..." test
**** TODO trouble: need to search in both directions
Suppose I ask for all descendents of x and y, where y only has a few. If I try to find all descendents of both and take the intersection, it might run out of memory, whereas if I searched the ancestors of each descendent of y, it would complete (assuming they have fewer ancestors).
**** TODO maybe the algorithm
***** First find a [(candidate, substitution)] for the head expression.
Build that set from the bottom up.
Each leaf is either a Word or a Var; either way, done.
For each QRel in higher generations:
  Find all candidates, based on the Template.
  Restrict those candidates, based on fixed members.
  If any of the QRel's members are variables, then for each candidate, attach a substitution indicating what each variable corresponds to in that particular candidate.
  Merge deeper variables into that substitution. That is, if any of the fixed members of a candidate are themselves Rels which contain variables, then that fixed member contains a substitution, so merge that with the substitution we developed in the previous step.
  If ever we merge two incompatible substitutions, then there are no solutions, so abort the rest of the computation.
***** Work through the (other) constraints.
Keep the constraints in a queue, not a list.
Consider the first constraint.
  If the constraint refers to a still-free variable, put it at the end of the queue. Attach a (Maybe Int) to it, containing the length of the queue. If we reach it again and the queue has the same length, there are no solutions. (This could be more inefficient.)
  If the constraint includes only bound variables, use it to eliminate some of the head expression candidates.
**** thought experiments
***** TODO trouble ! what if a variable is mentioned in two conditions and not the head expression?
"_ #is ?x" where (not $ x==y) & ("y #eats bugs")
Nothing in "not $ x == y", nor anything in the head expression, specifies y.
Therefore "not $ x==y" has to be put on hold.
"y #eats bugs" does specify y. So:

Find all "_ #is ?x" rels. Call those "is".
  For each i in is, associate x(i).
Find all "?y #eats bugs" rels. Call them "es".
  For each e in es, associate y(e).
***** "?x #is _ ##because ?y #is _" where (conditions)
let xs = all "?x #is <>" rels
let ys = all "?y is <>" rels
let bs = all "<> #because <>" rels
keep every b = "x #because y" s.t. x in xs and y in ys.
keep every remaining b s.t. x and y pass the conditions.
***** "?x #is _ ##when _  ###because ?y #is _" where (conditions)
Let xis = all "?x #is _" rels.
Let ws = all "_ when _" rels.
Let ws' = those ws for which member 1 is in xis.
Let
***** "_ #needs (not("oxygen"))"
  Too hard to parse. Instead use "_ #needs x" & not(x=="oxygen").
  Find all the #needs Rels
  Test that the second thing is not "oxygen".
***** x where "_ #needs ?x" & not(x == "oxygen")
  Find ns = all #needs rels.
    Upon finding each such value n, associate "x of n" = n's second member.
      (This prevents having to make the same traversal twice.)
  For the x of each n, test whether it is "oxygen". If not, add to report.
***** x where "_ #needs ?x" & not("?x #is alive")
  Find ns = all #needs rels.
    Upon finding each such value n, associate "x of n" = n's second member.
      (This prevents having to make the same traversal twice.)
  Find l2s = all #is rels with member 2 = "alive".
    Upon finding each such value i, associate "x of i" = i's 1st member.
  Report (x of ns) - (x of is).
*** ordinary editing
insert text.
delete text: prev word, next word.
highlight, cut, copy, paste.
up, down, left, right.
forward word, backward word.
search to next, previous.
*** rslt-specific editing
* to do
** features
*** query the db
**** query types
Query : QImg ImgOfExpr  |  QRel [Query] Query
  .  |  QHasMember Query  |  QHas Query  |  QHasAt Query
  .  |  QAnd [Query]  |  QOr [Query]
  .  |  QNot Query  |  QVariety Variety  |  QVar String  | QAnonVar Int
**** "runnability" and datalog-style conditioning
"Runnable" means "sometimes valid". A user can only run valid Queries, but a Query can be valid even with invalid subqueries.
QImg        : runnable. Vvalid.
QRel        : runnable. Vvalid <=> has a valid subQuery (maybe the template).
QHas*       : runnable. Vvalid <=> has a valid Query.
QAnd        : runnable. Vvalid <=> has a valid Query.
QOr         : runnable. Vvalid <=> has only valid Queries.
QNot, QVariety, \*Var  :  not runnable, not valid.
**** TODO algorithms (only exist for "runnable" Queries)
**** a complex query
(x,y) where "?x #is blue ##because refraction"
          & "?x #eats ?y"
          & x=("_ #of _" | Par)
          & y=( not( has "bird" ) )
*** represent rules in the db
*** Hash
*** edit a db
** minor
*** (awaiting response) Tests.curry:-- call `broken` fron the REPL?
  https://stackoverflow.com/questions/53547365/the-pakcs-repl-consider-something-undefined-but-the-module-defining-it-is-loade
*** Index.exprImgKey'default x = Just x -- TODO : Why the warning?
*** (awaiting response) add Util.sort to the List module
  https://mail.google.com/mail/u/0/#sent/KtbxLvHkVTXWJFRfxzwlKdBtLNPMLtGMcL
** change architecture
*** force full evaluation of index immediately
*** use ordinary hard-disk files rather than Rslt.Files
* some Curry functions I might need
** use &> instead of guards
These seem to be equivalent:

somethingThatHoldsAt :: Index -> Int -> Addr -> Addr
somethingThatHoldsAt i pos a0
  | Just s =:= positionsHeldBy i a0
    & fElem (RoleMember pos, a) (setRBT2list s)
  = a where a,s free

aRelUsingTemplate    :: Index -> Addr -> Addr
aRelUsingTemplate i a0
  | Just s =:= positionsHeldBy i a0
    & fElem (RoleTplt, a) (setRBT2list s)
  = a where a,s free
** Hex-formatting a number
showInt 'x' Nothing (Just 1) (Just 1) 31
* pitfall & solved, I think
** ? conflicting definitions, (supposedly) in standard library
*** It happens if I import two libraries, unqualified, that define the same name
*** example
**** if I add this line to All.curry:
 import List as M
**** then I get these errors
 /home/jeff/logic/curry/install/pakcs-2.0.2/lib/.curry/List.icurry, line 6.1: Error:
     Multiple exports of name `delete' at:
       line 6.1
       line 4.1

 /home/jeff/logic/curry/install/pakcs-2.0.2/lib/.curry/List.icurry, line 49.1: Error:
     Multiple exports of name `sortBy' at:
       line 49.1
       line 17.1
